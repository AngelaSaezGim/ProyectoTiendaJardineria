/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tiendaUI;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.JCheckBox;
import java.sql.SQLException;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import javax.swing.*;

import tiendaDataAccess.DataAccessManager;
import tiendaObjetos.Cliente;

/**
 *
 * @author angsaegim
 */
public class DeleteClientWindow extends javax.swing.JInternalFrame {

    private TiendaManagementWindow mainMenu;
    // Para que el frame NO SE MUEVA
    private final int fixedX = 0;
    private final int fixedY = 0;

    /**
     * Creates new form deleteClientWindow
     */
    public DeleteClientWindow(TiendaManagementWindow mainMenu) {

        this.setBorder(null);
        this.mainMenu = mainMenu;
        initComponents();
        this.setResizable(false);
        ((BasicInternalFrameUI) this.getUI()).setNorthPane(null); // Eliminar el borde superior
        this.setLocation(fixedX, fixedY);

        // Desactivar el listener de arrastre
        this.removeMouseListener(this.getMouseListeners()[0]);

        // Para no poder arrastrar y mover el frame
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentMoved(ComponentEvent e) {
                setLocation(fixedX, fixedY);
            }
        });

        //cargamos todos los datos en la tabla
        try {
            loadData();
        } catch (SQLException e) {
            e.getMessage();
        }

        this.pack();

        //no permitimos editar el contenido de la tabla
        this.clientList.setCellSelectionEnabled(false);
        this.clientList.setRowSelectionAllowed(false);
        this.clientList.setColumnSelectionAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // Ventana fija
    @Override
    public void setLocation(int x, int y) {
        // Nada para evitar que el frame se mueva y hacer que se mantenga en posición fija
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        regresarButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientList = new javax.swing.JTable();
        eliminarBoton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(950, 522));

        regresarButton.setText("Atrás");
        regresarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setToolTipText("");

        clientList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        clientList.setToolTipText("");
        clientList.setPreferredSize(new java.awt.Dimension(500, 700));
        jScrollPane1.setViewportView(clientList);

        eliminarBoton.setText("Pulsa Aquí Para Eliminar Cliente Seleccionado");
        eliminarBoton.setActionCommand("Pulsa Aquí Para Eliminar Clientes Seleccionados");
        eliminarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(eliminarBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(regresarButton)
                        .addGap(0, 864, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(regresarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eliminarBoton)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regresarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarButtonActionPerformed
        // TODO add your handling code here:
        // Hacer invisible la ventana actual
        this.dispose(); //cerramos
        mainMenu.setVisible(true); //enseñar menu 
    }//GEN-LAST:event_regresarButtonActionPerformed

    private void eliminarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBotonActionPerformed
        // TODO add your handling code here:
        int rowCount = clientList.getRowCount(); //contamos las filas (para el iterador)
        //clientes a borrar (listas de id)
        List<String> idsToDelete = new ArrayList<>();

        for (int i = 0; i < rowCount; i++) {
        Boolean isSelected = (Boolean) clientList.getValueAt(i, 0); // La primera columna es el checkbox -- contamos por ahi
        // saber a quien tenemos que borrar y a quien no
        //si esta Seleccionado=lo añadimos a la LISTA de ids a borrar
        if (isSelected != null && isSelected) {
            Object idObj = clientList.getValueAt(i, 1); // La segunda columna es el ID del cliente (cogemos eso)
            String id = idObj.toString(); // CONVERTIMOS ID (que es INT) a STRING (para añadirlo a la lista)
            idsToDelete.add(id); //lista de ids a borrar
        }
    }
     // Si no se ha seleccionado nada y le damos al botón, saldrá un mensaje así
    if (idsToDelete.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No se ha seleccionado ningún cliente para eliminar.", "Información", JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    // mensaje de confirmación de borrado con showConfirmDialog
    int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar los clientes seleccionados?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
    //eliminamos=
    if (confirm == JOptionPane.YES_OPTION) {
        int totalFilasEliminadas = 0;
        //iteramos en la lista de ids a Borrar
        for (String id : idsToDelete) {
            try {
                //por cada id, aplicamos el delete del accessManager
                int filasEliminadas = DataAccessManager.getInstance().deleteClient(id);
                //vamos sumando filas o clientes que hemos eliminado
                totalFilasEliminadas += filasEliminadas;
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al eliminar cliente con ID: " + id + "\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //nos notifica que se eliminaron clientes y cuantos se eliminaron
        JOptionPane.showMessageDialog(this, "Clientes eliminados: " + totalFilasEliminadas, "Información", JOptionPane.INFORMATION_MESSAGE);
        try {
            loadData(); // Recargar la tabla después de eliminar
        } catch (SQLException e) {
            e.getMessage();
        }
    }
    }//GEN-LAST:event_eliminarBotonActionPerformed

    private void loadData() throws SQLException {
        
        List<Cliente> allClientes = DataAccessManager.getInstance().loadAllClientes();
        DefaultTableModel dtm = new NotEditableTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0) {
                    return Boolean.class; // La primera columna será de tipo Boolean
                } else {
                    return String.class;
                }
            }
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 0; // Permite solo editar las checkboxes == 0;
            }
        };
        dtm.addColumn("Seleccionar");
        dtm.addColumn("Id");
        dtm.addColumn("NombreCliente");
        dtm.addColumn("Telefono");
        dtm.addColumn("Pais");
        dtm.addColumn("CodigoEmpleadoRelacionado");

        for (Cliente cliente : allClientes) {
            Object[] dtmRow = new Object[6];
            dtmRow[0] = false; // primero estará elcheckbox desmarcado
            dtmRow[1] = cliente.getCodigoCliente();
            dtmRow[2] = cliente.getNombreCliente();
            dtmRow[3] = cliente.getTelefono();
            dtmRow[4] = cliente.getPais();
            dtmRow[5] = cliente.getCodigoClienteEmpleado();
            dtm.addRow(dtmRow);
        }

        this.clientList.setModel(dtm);
        this.pack();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable clientList;
    private javax.swing.JButton eliminarBoton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton regresarButton;
    // End of variables declaration//GEN-END:variables
}
