/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tiendaUI;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.sql.SQLException;
import java.util.List;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import tiendaDataAccess.DataAccessManager;
import tiendaObjetos.Cliente;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.JOptionPane;

/**
 *
 * @author angsaegim
 */
public class UpdateClientWindow extends javax.swing.JInternalFrame {

    private TiendaManagementWindow mainMenu;
    // Para que el frame NO SE MUEVA
    private final int fixedX = 0;
    private final int fixedY = 0;

    /**
     * Creates new form updateClientWindow
     */
    public UpdateClientWindow(TiendaManagementWindow mainMenu) {

        this.setBorder(null);
        this.mainMenu = mainMenu;
        initComponents();
        this.setResizable(false);
        ((BasicInternalFrameUI) this.getUI()).setNorthPane(null); // Eliminar el borde superior
        this.setLocation(fixedX, fixedY);
        // Desactivar el listener de arrastre
        this.removeMouseListener(this.getMouseListeners()[0]);

        // Para no poder arrastrar y mover el frame
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentMoved(ComponentEvent e) {
                setLocation(fixedX, fixedY);
            }
        });

        //cargamos todos los datos en la tabla
        try {
            loadData();
        } catch (SQLException e) {
            e.getMessage();
        }

        this.pack();

        //no permitimos editar el contenido de la tabla
        this.clientList.setCellSelectionEnabled(false);
        this.clientList.setRowSelectionAllowed(false);
        this.clientList.setColumnSelectionAllowed(false);

        // No lo escribumos - lo seleccionamos desde la tabla (donde le demos al campo es donde estar치)
        txtIdClienteActualizar.setEnabled(false);
        txtIdClienteActualizar.setEditable(false);

        // Listener para la tabla que detecta la selecci칩n de fila - seleccionar en tabla
        clientList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    int selectedRow = clientList.getSelectedRow();
                    if (selectedRow != -1) {
                        String codigoCliente = clientList.getValueAt(selectedRow, 0).toString();
                         //Si se selecciona un campo - pone el id en el textarea de id
                        txtIdClienteActualizar.setText(codigoCliente);
                    }
                }
            }
        });
        
        txtNuevoNombreCliente.setEnabled(false);
        txtNuevoTelefonoCliente.setEnabled(false);
        txtNuevoPaisCliente.setEnabled(false);
        txtNuevoCodigoEmpleadoVinculado.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // Ventana fija
    @Override
    public void setLocation(int x, int y) {
        // Nada para evitar que el frame se mueva y hacer que se mantenga en posici칩n fija
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        regresarButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtNuevoNombreCliente = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtNuevoTelefonoCliente = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtNuevoPaisCliente = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtNuevoCodigoEmpleadoVinculado = new javax.swing.JTextArea();
        actualizar = new javax.swing.JButton();
        borrar = new javax.swing.JButton();
        seleccionarCodigoClienteAactualizar = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtIdClienteActualizar = new javax.swing.JTextArea();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(950, 522));

        regresarButton.setText("Atr치s");
        regresarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setToolTipText("");

        clientList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "IdCliente", "Nombre", "Telefono", "Pais", "Cod. Empleado"
            }
        ));
        clientList.setToolTipText("");
        clientList.setMinimumSize(new java.awt.Dimension(60, 40));
        clientList.setName(""); // NOI18N
        clientList.setPreferredSize(new java.awt.Dimension(500, 700));
        clientList.setRowHeight(21);
        jScrollPane1.setViewportView(clientList);

        jLabel1.setBackground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Codigo Cliente a Actualizar :");

        jLabel2.setText("Nuevo nombre Cliente");
        jLabel2.setName(""); // NOI18N
        jLabel2.setPreferredSize(new java.awt.Dimension(60, 60));

        jLabel3.setText("Nuevo Codigo Empleado Vinculado a Cliente");
        jLabel3.setName(""); // NOI18N
        jLabel3.setPreferredSize(new java.awt.Dimension(60, 60));

        jLabel4.setText("Nuevo Telefono Cliente");
        jLabel4.setName(""); // NOI18N
        jLabel4.setPreferredSize(new java.awt.Dimension(60, 60));

        jLabel5.setText("Nuevo Pais Cliente");
        jLabel5.setName(""); // NOI18N
        jLabel5.setPreferredSize(new java.awt.Dimension(60, 60));

        txtNuevoNombreCliente.setColumns(1);
        txtNuevoNombreCliente.setRows(1);
        txtNuevoNombreCliente.setAutoscrolls(false);
        txtNuevoNombreCliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtNuevoNombreCliente.setEnabled(false);
        jScrollPane3.setViewportView(txtNuevoNombreCliente);

        txtNuevoTelefonoCliente.setColumns(1);
        txtNuevoTelefonoCliente.setRows(1);
        txtNuevoTelefonoCliente.setAutoscrolls(false);
        txtNuevoTelefonoCliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtNuevoTelefonoCliente.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtNuevoTelefonoCliente.setEnabled(false);
        jScrollPane4.setViewportView(txtNuevoTelefonoCliente);

        txtNuevoPaisCliente.setColumns(1);
        txtNuevoPaisCliente.setRows(1);
        txtNuevoPaisCliente.setAutoscrolls(false);
        txtNuevoPaisCliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtNuevoPaisCliente.setEnabled(false);
        jScrollPane5.setViewportView(txtNuevoPaisCliente);

        txtNuevoCodigoEmpleadoVinculado.setColumns(1);
        txtNuevoCodigoEmpleadoVinculado.setRows(1);
        txtNuevoCodigoEmpleadoVinculado.setAutoscrolls(false);
        txtNuevoCodigoEmpleadoVinculado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtNuevoCodigoEmpleadoVinculado.setEnabled(false);
        jScrollPane6.setViewportView(txtNuevoCodigoEmpleadoVinculado);

        actualizar.setText("Actualizar");
        actualizar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarActionPerformed(evt);
            }
        });

        borrar.setText("Borrar");
        borrar.setActionCommand("");
        borrar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });

        seleccionarCodigoClienteAactualizar.setText("Seleccionar");
        seleccionarCodigoClienteAactualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarCodigoClienteAactualizarActionPerformed(evt);
            }
        });

        txtIdClienteActualizar.setColumns(1);
        txtIdClienteActualizar.setRows(1);
        txtIdClienteActualizar.setAutoscrolls(false);
        txtIdClienteActualizar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtIdClienteActualizar.setEnabled(false);
        jScrollPane7.setViewportView(txtIdClienteActualizar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(seleccionarCodigoClienteAactualizar)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(regresarButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(17, 17, 17)
                            .addComponent(jScrollPane3))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(14, 14, 14)
                            .addComponent(jScrollPane4))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane5))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(borrar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(218, 501, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(regresarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seleccionarCodigoClienteAactualizar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addComponent(actualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(borrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regresarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarButtonActionPerformed
        // TODO add your handling code here:
        this.dispose(); //cerramos
        mainMenu.setVisible(true); //ense침ar menu 
    }//GEN-LAST:event_regresarButtonActionPerformed

    private void actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarActionPerformed
        // TODO add your handling code here:
        DataAccessManager dataAccessManager = DataAccessManager.getInstance();

        String idClienteAactualizar = txtIdClienteActualizar.getText();

        String nuevoNombreCliente = txtNuevoNombreCliente.getText();
        String nuevoTelefonoCliente = txtNuevoTelefonoCliente.getText();
        String paisCliente = txtNuevoPaisCliente.getText();
        String codigoEmpleadoRelacionado = txtNuevoCodigoEmpleadoVinculado.getText();

        //Objeto clienteAactualizar (lo creamos desde aqu칤 y lo pasamos al update)
        Cliente clienteActualizar;

        int filasAfectadas = 0;
        short codigoEmpleadoShort;

        try {
            // Carga el cliente actual desde la base de datos con la id que tenemos
            clienteActualizar = dataAccessManager.loadClientesByCode(idClienteAactualizar);
            // Actualiza el cliente con los nuevos valores - SI HEMOS RELLENADO (si no se deja como est치)
            if (!nuevoNombreCliente.isEmpty()) {
                clienteActualizar.setNombreCliente(nuevoNombreCliente);
            }
            if (!nuevoTelefonoCliente.isEmpty()) {
                clienteActualizar.setTelefono(nuevoTelefonoCliente);
            }
            if (!paisCliente.isEmpty()) {
                clienteActualizar.setPais(paisCliente);
            }
            if (!codigoEmpleadoRelacionado.isEmpty()) {
                try {

                    codigoEmpleadoShort = Short.parseShort(codigoEmpleadoRelacionado);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "El c칩digo de empleado relacionado debe ser un n칰mero v치lido", "Error", JOptionPane.ERROR_MESSAGE);
                    return; // Salir del m칠todo si el c칩digo de empleado relacionado no es un n칰mero v치lido
                }
                clienteActualizar.setCodigoClienteEmpleado(codigoEmpleadoShort);
            }

            filasAfectadas = dataAccessManager.updateClient(idClienteAactualizar, clienteActualizar);
            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(this, "Cliente actualizado exitosamente.", "칄xito", JOptionPane.INFORMATION_MESSAGE);
                loadData(); // Refresca la tabla despu칠s de la actualizaci칩n}
            } else {
                JOptionPane.showMessageDialog(this, "Error al actualizar el cliente, no se actualiz칩 nada: ", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar el cliente: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_actualizarActionPerformed

    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
        // TODO add your handling code here:
        // Limpiar todos los campos de texto
        txtNuevoNombreCliente.setText("");
        txtNuevoTelefonoCliente.setText("");
        txtNuevoPaisCliente.setText("");
        txtNuevoCodigoEmpleadoVinculado.setText("");

        clientList.clearSelection();
    }//GEN-LAST:event_borrarActionPerformed

    private void seleccionarCodigoClienteAactualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarCodigoClienteAactualizarActionPerformed
        // TODO add your handling code here:
        //Seleccionar codgio cliente a actualizar
        if (clientList.getSelectedRow() != -1) {
            txtIdClienteActualizar.setText(clientList.getValueAt(clientList.getSelectedRow(), 0).toString());
            JOptionPane.showMessageDialog(this, "Se selecciono el cliente " + txtIdClienteActualizar.getText());
            // se activan los campos para poder escribir
            txtNuevoNombreCliente.setEnabled(true);
            txtNuevoTelefonoCliente.setEnabled(true);
            txtNuevoPaisCliente.setEnabled(true);
            txtNuevoCodigoEmpleadoVinculado.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un cliente de la lista para actualizar. (Seleccione alg칰n campo y haga clic en 'Seleccionar')");
        }
    }//GEN-LAST:event_seleccionarCodigoClienteAactualizarActionPerformed

    private void loadData() throws SQLException {

        DataAccessManager dataAccessManager = DataAccessManager.getInstance();
        List<Cliente> clients = dataAccessManager.loadAllClientes();

        // modelo existente para evitar agregar columnas repetidas
        DefaultTableModel dtm = (DefaultTableModel) clientList.getModel();

        // Limpiar
        dtm.setRowCount(0);

        // Asegurarse de que las columnas no se dupliquen
        if (dtm.getColumnCount() == 0) {
            dtm.addColumn("Id");
            dtm.addColumn("NombreCliente");
            dtm.addColumn("Telefono");
            dtm.addColumn("Pais");
            dtm.addColumn("CodigoEmpleadoRelacionado");
        }

        // A침adir las filas de datos
        for (Cliente cliente : clients) {
            dtm.addRow(new Object[]{
                cliente.getCodigoCliente(),
                cliente.getNombreCliente(),
                cliente.getTelefono(),
                cliente.getPais(),
                cliente.getCodigoClienteEmpleado()
            });
        }

        // Notificar a la tabla que el modelo ha cambiado
        dtm.fireTableDataChanged();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizar;
    private javax.swing.JButton borrar;
    private javax.swing.JTable clientList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton regresarButton;
    private javax.swing.JButton seleccionarCodigoClienteAactualizar;
    private javax.swing.JTextArea txtIdClienteActualizar;
    private javax.swing.JTextArea txtNuevoCodigoEmpleadoVinculado;
    private javax.swing.JTextArea txtNuevoNombreCliente;
    private javax.swing.JTextArea txtNuevoPaisCliente;
    private javax.swing.JTextArea txtNuevoTelefonoCliente;
    // End of variables declaration//GEN-END:variables
}
